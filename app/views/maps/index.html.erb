<!-- Set this to a variable, and call it in the array in the script tag -->
<!-- make the locations in our db into an object that we can call on in the javascript -->
 	<% @locations.each do |a| %>
    <% a.title %>
		<% a.lat %>
		<% a.lng%>
	<% end %>

<script type="text/javascript">

var map;
// Create a new blank array for all the listing markers
var markers = [];
// Create placemarkers array to use in multiple functons to have control over the number of places that show
var placeMarkers = [];

var testing = [];

var titles;
var latitudes;
var longitudes;


window.initMap = function () {
  // var button = document.getElementById('button-api');
	// Shows the listings from out array
  document.getElementById('show-listings').addEventListener('click', showListings);
  // Hides the listings
  document.getElementById('hide-listings').addEventListener('click', function(){
    hideMarkers(markers);
  });
  // When the zoom to area button is clicked
  document.getElementById('zoom-to-area').addEventListener('click', function(){
    zoomToArea();
  });

  map = new google.maps.Map(document.getElementById('map'), {
    // center in Philadelphia
    center: {lat: 39.9523789, lng: -75.1635996},
    zoom: 13,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });   

  // This autocomplete is for use in the geocoder entry box
  var zoomAutocomplete = new google.maps.places.Autocomplete(
      document.getElementById('zoom-to-area-text'));     
  // "Push" our test location to the locations variable so we can cycle through them in the for loop
	var locations = <%= raw @test_array.to_json%>
	// console.log(locations)
	// This function will loop through the markers array and display them all.
	// This group uses the location array to create an array of markers on initialiation.
  for (var i = 0; i < locations.length; i++) {
    // get the position from the location array, locations array location
    var position = locations[i]
    // locations array title
    // var title = locations[i].title;
    // Creare a marker per location, and put into markers array.
    var marker = new google.maps.Marker({
      // map: map,
      position: position,
      // title: title,
      // icon: defaultIcon,
      animation: google.maps.Animation.DROP,
      id: i
    });
    // Push the marker to our array of markers
    markers.push(marker);
  }       
}

function showListings() { 
	var bounds = new google.maps.LatLngBounds();
    // console.log(bounds)
    // console.log(markers)
    // Extend the boundaries of the map for each marker and display the marker
	for (var i = 0; i < markers.length; i++) {
	  markers[i].setMap(map);
	  bounds.extend(markers[i].position);
	}
  // includes all points in the view 
	map.fitBounds(bounds);

}

// This function will loop through the listings and hide them all.
// make it generic, markers array is variable that is passed into this so we can hide arrays of markers.
function hideMarkers(markers) {
  for (var i = 0; i < markers.length; i++){
    markers[i].setMap(null);
  }
}

// This function takes the input value in the find nearby area text input locates it, and then zooms into that area. This is so that the user can show all, listings, then decide to focus on one area of the map.
function zoomToArea(){
  // initialize geocoder, new geocode instance
  var geocoder = new google.maps.Geocoder();
  // get address or place that the user entered
  var address = document.getElementById('zoom-to-area-text').value;
  // make sre the address isnt blank
  if (address == '') {
    window.alert('You must enter an area, or address.');
  } else {
    // Geocode the address/area entered to get the center. Then, center the map on it and zoom in
    geocoder.geocode(
      { address: address,
        // location: LatLng,
        // keep it with in the city
        componentRestrictions: {locality: 'Philadelphia'}
    }, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        // use resulting lat long to recenter the map
        // console.log(results[0].geometry.location.lat())


        map.setCenter(results[0].geometry.location);
        map.setZoom(15);

        // Targeting the lat, lng, nd formatted address of the location that was zoomed in on
        var lati = new google.maps.Marker({
          latit: results[0].geometry.location.lat(),        
        }); 
        testing.push(lati);
        latitudes = results[0].geometry.location.lat();

        var longi = new google.maps.Marker({
          longi: results[0].geometry.location.lng(), 
        });
        testing.push(longi);
        longitudes = results[0].geometry.location.lng();

        var titl = new google.maps.Marker({
          titl: results[0].formatted_address, 
        });
        testing.push(titl);
        titles = results[0].formatted_address;
        // 
        var marker = new google.maps.Marker({
          position: results[0].geometry.location,
          // title: title,
          // icon: defaultIcon,
          animation: google.maps.Animation.DROP,
          // id: i
          });
            // Push the marker to our array of markers
        markers.push(marker);
      } else {
        window.alert('We could not find that location - try entering a more' + ' specific place.');
      }
    });
  }
}

function isTitles(){
  if (titles.length > 1) {
    console.log(titles)
    console.log(latitudes)
    console.log(longitudes)
  } else {
    console.log("no")
  }
}

google.maps.event.addDomListener(window, 'load', initMap())


</script>

<br>
<br>
<hr>

<%= form_for @location do |f| %>
	<div> Title: <%= f.text_field :title %></div>
	<div> Latitute: <%= f.text_field :lat, :id => 'lat-input' %></div>
  <div> Longitude: <%= f.text_field :lng, :id => 'lng-input' %></div>
	<%= f.submit "create location", :id => 'button-api' %>
<% end %>

<hr>

<% @locations.each do |a| %>
  <div><%= a.title %></div>
	<div class='latitude'><%= a.lat %></div>
	<div><%= a.lng %></div>
<% end %>
