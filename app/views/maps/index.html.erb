
<hr>
    <h3> Find where you can get water in Phildelphia</h3>
    <div class="container">
      <div class="options-box">
        <div>
          <input id ="show-listings" type="button" value="Free Water">
          <input id ="hide-listings" type="button" value="I'd rather buy a bottle">
        </div>
        <div>
          <!-- inputs to search area. may be good for placing where water is -->
          <input id ="zoom-to-area-text" type="text" placeholder="You can get free water here!">
          <input id ="zoom-to-area" type="button" value="Go">
        </div>
        <!-- HTML FORM TO PASS INFO INTO DB -->
        <p> Add a location for free water </p>
        <form accept-charset="UTF-8" action="/locations" method="post">
          <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
           <div><input id="title" name="location[title]" type="text" placeholder="Location"></input></div>
          <div><input id="latitude" name="location[lat]" type="text" placeholder="Latitude"></input></div>
          <div><input id="longitude" name="location[lng]" type="text" placeholder="Longitude"></input></div>
           <input name="commit" type="submit" value="Add to Free Water" />
        </form>
        <div id="map"></div>
      </div>
    </div>

<br>

<hr>
Our listed points in the database
<% @locations.each do |a| %>
  <div><%= a.title %></div>
	<div class='latitude'><%= a.lat %></div>
	<div><%= a.lng %></div>
<% end %>


<!-- The Google map API Key -->
<script src="https://maps.googleapis.com/maps/api/js?libraries=places,drawing,geometry&key=<%= ENV["MAP_API"] %>&v=3"></script>

<script type="text/javascript">

function initMap() {
  var map;
  // Create a new blank array for all the listing markers
  var markers = [];
  // Create placemarkers array to use in multiple functons to have control over the number of places that show
  var placeMarkers = [];
  var titles;
  var latitudes;
  var longitudes;

  var largeInfowindow = new google.maps.InfoWindow();
  // Shows the listings from out array
  document.getElementById('show-listings').addEventListener('click', showListings);
  // Hides the listings
  document.getElementById('hide-listings').addEventListener('click', function(){
    hideMarkers(markers);
  });
  // When the zoom to area button is clicked
  document.getElementById('zoom-to-area').addEventListener('click', function(){
    zoomToArea();
    showListings();
  });

  map = new google.maps.Map(document.getElementById('map'), {
    // center in Philadelphia
    center: {lat: 39.9523789, lng: -75.1635996},
    zoom: 13,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });   

  // This autocomplete is for use in the geocoder entry box
  var zoomAutocomplete = new google.maps.places.Autocomplete(
      document.getElementById('zoom-to-area-text'));     
  // "Push" our test location to the locations variable so we can cycle through them in the for loop
  var locations = <%= raw @test_array.to_json%>
  // This function will loop through the markers array and display them all.
  // This group uses the location array to create an array of markers on initialiation.
  for (var i = 0; i < locations.length; i++) {
    // get the position from the location array, locations array location
    var position = locations[i]
    // locations array title
    // Creare a marker per location, and put into markers array.
    var marker = new google.maps.Marker({
      position: position,
      animation: google.maps.Animation.DROP,
      id: i
    });
    // Push the marker to our array of markers
    markers.push(marker); 
  }  

  function showListings() { 
    var bounds = new google.maps.LatLngBounds();
      // Extend the boundaries of the map for each marker and display the marker
    for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(map);
      bounds.extend(markers[i].position);
    }
    // includes all points in the view 
    map.fitBounds(bounds);
  }

  // This function will loop through the listings and hide them all.
  // make it generic, markers array is variable that is passed into this so we can hide arrays of markers.
  function hideMarkers(markers) {
    for (var i = 0; i < markers.length; i++){
      markers[i].setMap(null);
    }
  }

  // This function takes the input value in the find nearby area text input locates it, and then zooms into that area. This is so that the user can show all, listings, then decide to focus on one area of the map.
  function zoomToArea(){
    // initialize geocoder, new geocode instance
    var geocoder = new google.maps.Geocoder();
    // get address or place that the user entered
    var address = document.getElementById('zoom-to-area-text').value;
    // make sre the address isnt blank
    if (address == '') {
      window.alert('You must enter an area, or address.');
    } else {
      // Geocode the address/area entered to get the center. Then, center the map on it and zoom in
      geocoder.geocode(
        { address: address,
          // keep it with in the city
          componentRestrictions: {locality: 'Philadelphia'}
      }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          // use resulting lat long to recenter the map
          map.setCenter(results[0].geometry.location);
          map.setZoom(15);
          // Targeting the lat lng of the location that was zoomed in on
          latitudes = results[0].geometry.location.lat();
          document.getElementById('latitude').value = latitudes;

          longitudes = results[0].geometry.location.lng();
          document.getElementById('longitude').value = longitudes;

          document.getElementById('title').value = address;

          var marker = new google.maps.Marker({
            position: results[0].geometry.location,
            animation: google.maps.Animation.DROP,
            });
              // Push the marker to our array of markers
          markers.push(marker);
        } else {
          window.alert('We could not find that location - try entering a more' + ' specific place.');
        }
      });
    }
  }
}
google.maps.event.addDomListener(window, 'load', initMap())
</script>